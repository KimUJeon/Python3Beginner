def recArea(a, b) : #사각형의 넓이를 연산하고 반환하는 함수
    return a * b 

print(recArea(10, 20))

'''
200 이 출력이 된다.
'''


#def 함수 이름(*매개변수):
#형식으로 선언할 경우 인자가 변할 수 있다는 점을 알리고 <튜플> 로 저장됨.

def subNums(*t) :
    print(t, type(t)) #튜플인지 확인
    total = 0
    
    for i in t :
        total = total + i
    
    return total

print(subNums(1, 5, 32, 3, 4, 57, 5))
print(subNums(5, 29))


'''
(1, 5, 32, 3, 4, 57, 5) <class 'tuple'>
107
(5, 29) <class 'tuple'>
34
'''

! 가변 인자 !
#(ch, *t) 로 선언해야만 컴퓨터가 일반 매개 변수와 가변인자를 구분할 수 있다.
#(*t, ch) 는 구분을 못하므로 일반 매개 변수가 앞으로 가게 할 것


def calNums(ch, *t) :
    if ch == "sum" : #모든 값을 더합니다.
        total = 0
        for i in t :
            total = total + i

    elif ch == "mul" :	#모든 값을 곱합니다.
        total = 1
        for i in t :
            total = total * i

    else :
        print("실행할 수 없습니다.")
        
    return total
    
choice = input("덧셈은 sum, 곱셈은 mul를 입력하세요:")
print(calNums(choice, 1, 2, 3, 2, 5, 3, 2))  


'''
sum
18
'''



! 워드 매개 변수 !
# 전달 인자를 (key1:value1, key2:value2, ...)와 같은 방식으로 딕셔너리 선언을 할 수 있다.

def func(**kwargs) :
    print(kwargs)
    
num = 10
func(apple="사과", a = num, num = 4)


'''
{'apple':'사과', 'a' = 10, 'num' = 4}
'''

#key 는 따옴표로 감싸지 않고 일반 변수처럼 작성할 것
#def func(**kwargs, *nums) 는 할 수 없다.

def func(*nums, **kwargs) :
    print(nums)
    print(kwargs)
    
num = 10
func(1, 3, 5, 7, apple="사과", a = num, num = 4)

'''
(1, 3, 5, 7)
{'apple':'사과', 'a' = 10, 'num' = 4}
'''
